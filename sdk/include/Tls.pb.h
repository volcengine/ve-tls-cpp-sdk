// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tls

#ifndef GOOGLE_PROTOBUF_INCLUDED_Tls
#define GOOGLE_PROTOBUF_INCLUDED_Tls

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Tls
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Tls {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Tls;
namespace pb {
class Log;
struct LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class LogContent;
struct LogContentDefaultTypeInternal;
extern LogContentDefaultTypeInternal _LogContent_default_instance_;
class LogGroup;
struct LogGroupDefaultTypeInternal;
extern LogGroupDefaultTypeInternal _LogGroup_default_instance_;
class LogGroupList;
struct LogGroupListDefaultTypeInternal;
extern LogGroupListDefaultTypeInternal _LogGroupList_default_instance_;
class LogTag;
struct LogTagDefaultTypeInternal;
extern LogTagDefaultTypeInternal _LogTag_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::Log* Arena::CreateMaybeMessage<::pb::Log>(Arena*);
template<> ::pb::LogContent* Arena::CreateMaybeMessage<::pb::LogContent>(Arena*);
template<> ::pb::LogGroup* Arena::CreateMaybeMessage<::pb::LogGroup>(Arena*);
template<> ::pb::LogGroupList* Arena::CreateMaybeMessage<::pb::LogGroupList>(Arena*);
template<> ::pb::LogTag* Arena::CreateMaybeMessage<::pb::LogTag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class LogContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LogContent) */ {
 public:
  inline LogContent() : LogContent(nullptr) {}
  ~LogContent() override;
  explicit PROTOBUF_CONSTEXPR LogContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogContent(const LogContent& from);
  LogContent(LogContent&& from) noexcept
    : LogContent() {
    *this = ::std::move(from);
  }

  inline LogContent& operator=(const LogContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogContent& operator=(LogContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogContent* internal_default_instance() {
    return reinterpret_cast<const LogContent*>(
               &_LogContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogContent& a, LogContent& b) {
    a.Swap(&b);
  }
  inline void Swap(LogContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogContent& from) {
    LogContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LogContent";
  }
  protected:
  explicit LogContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:pb.LogContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Tls;
};
// -------------------------------------------------------------------

class Log final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Log) */ {
 public:
  inline Log() : Log(nullptr) {}
  ~Log() override;
  explicit PROTOBUF_CONSTEXPR Log(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Log& default_instance() {
    return *internal_default_instance();
  }
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Log& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Log& from) {
    Log::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .pb.LogContent Contents = 2;
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::pb::LogContent* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogContent >*
      mutable_contents();
  private:
  const ::pb::LogContent& _internal_contents(int index) const;
  ::pb::LogContent* _internal_add_contents();
  public:
  const ::pb::LogContent& contents(int index) const;
  ::pb::LogContent* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogContent >&
      contents() const;

  // int64 Time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogContent > contents_;
    int64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Tls;
};
// -------------------------------------------------------------------

class LogTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LogTag) */ {
 public:
  inline LogTag() : LogTag(nullptr) {}
  ~LogTag() override;
  explicit PROTOBUF_CONSTEXPR LogTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogTag(const LogTag& from);
  LogTag(LogTag&& from) noexcept
    : LogTag() {
    *this = ::std::move(from);
  }

  inline LogTag& operator=(const LogTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogTag& operator=(LogTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogTag* internal_default_instance() {
    return reinterpret_cast<const LogTag*>(
               &_LogTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogTag& a, LogTag& b) {
    a.Swap(&b);
  }
  inline void Swap(LogTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogTag& from) {
    LogTag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LogTag";
  }
  protected:
  explicit LogTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string Key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string Value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:pb.LogTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Tls;
};
// -------------------------------------------------------------------

class LogGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LogGroup) */ {
 public:
  inline LogGroup() : LogGroup(nullptr) {}
  ~LogGroup() override;
  explicit PROTOBUF_CONSTEXPR LogGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogGroup(const LogGroup& from);
  LogGroup(LogGroup&& from) noexcept
    : LogGroup() {
    *this = ::std::move(from);
  }

  inline LogGroup& operator=(const LogGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGroup& operator=(LogGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGroup* internal_default_instance() {
    return reinterpret_cast<const LogGroup*>(
               &_LogGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogGroup& a, LogGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogGroup& from) {
    LogGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LogGroup";
  }
  protected:
  explicit LogGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
    kLogTagsFieldNumber = 3,
    kSourceFieldNumber = 2,
    kFileNameFieldNumber = 4,
    kContextFlowFieldNumber = 5,
  };
  // repeated .pb.Log Logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::pb::Log* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Log >*
      mutable_logs();
  private:
  const ::pb::Log& _internal_logs(int index) const;
  ::pb::Log* _internal_add_logs();
  public:
  const ::pb::Log& logs(int index) const;
  ::pb::Log* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Log >&
      logs() const;

  // repeated .pb.LogTag LogTags = 3;
  int logtags_size() const;
  private:
  int _internal_logtags_size() const;
  public:
  void clear_logtags();
  ::pb::LogTag* mutable_logtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogTag >*
      mutable_logtags();
  private:
  const ::pb::LogTag& _internal_logtags(int index) const;
  ::pb::LogTag* _internal_add_logtags();
  public:
  const ::pb::LogTag& logtags(int index) const;
  ::pb::LogTag* add_logtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogTag >&
      logtags() const;

  // string Source = 2;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string FileName = 4;
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string ContextFlow = 5;
  void clear_contextflow();
  const std::string& contextflow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contextflow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contextflow();
  PROTOBUF_NODISCARD std::string* release_contextflow();
  void set_allocated_contextflow(std::string* contextflow);
  private:
  const std::string& _internal_contextflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contextflow(const std::string& value);
  std::string* _internal_mutable_contextflow();
  public:

  // @@protoc_insertion_point(class_scope:pb.LogGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Log > logs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogTag > logtags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contextflow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Tls;
};
// -------------------------------------------------------------------

class LogGroupList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LogGroupList) */ {
 public:
  inline LogGroupList() : LogGroupList(nullptr) {}
  ~LogGroupList() override;
  explicit PROTOBUF_CONSTEXPR LogGroupList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogGroupList(const LogGroupList& from);
  LogGroupList(LogGroupList&& from) noexcept
    : LogGroupList() {
    *this = ::std::move(from);
  }

  inline LogGroupList& operator=(const LogGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGroupList& operator=(LogGroupList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogGroupList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogGroupList* internal_default_instance() {
    return reinterpret_cast<const LogGroupList*>(
               &_LogGroupList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogGroupList& a, LogGroupList& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGroupList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogGroupList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogGroupList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogGroupList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogGroupList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogGroupList& from) {
    LogGroupList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGroupList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LogGroupList";
  }
  protected:
  explicit LogGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogGroupsFieldNumber = 1,
  };
  // repeated .pb.LogGroup LogGroups = 1;
  int loggroups_size() const;
  private:
  int _internal_loggroups_size() const;
  public:
  void clear_loggroups();
  ::pb::LogGroup* mutable_loggroups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogGroup >*
      mutable_loggroups();
  private:
  const ::pb::LogGroup& _internal_loggroups(int index) const;
  ::pb::LogGroup* _internal_add_loggroups();
  public:
  const ::pb::LogGroup& loggroups(int index) const;
  ::pb::LogGroup* add_loggroups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogGroup >&
      loggroups() const;

  // @@protoc_insertion_point(class_scope:pb.LogGroupList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogGroup > loggroups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Tls;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogContent

// string Key = 1;
inline void LogContent::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LogContent::key() const {
  // @@protoc_insertion_point(field_get:pb.LogContent.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogContent::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogContent.Key)
}
inline std::string* LogContent::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:pb.LogContent.Key)
  return _s;
}
inline const std::string& LogContent::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LogContent::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LogContent::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* LogContent::release_key() {
  // @@protoc_insertion_point(field_release:pb.LogContent.Key)
  return _impl_.key_.Release();
}
inline void LogContent::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogContent.Key)
}

// string Value = 2;
inline void LogContent::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& LogContent::value() const {
  // @@protoc_insertion_point(field_get:pb.LogContent.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogContent::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogContent.Value)
}
inline std::string* LogContent::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pb.LogContent.Value)
  return _s;
}
inline const std::string& LogContent::_internal_value() const {
  return _impl_.value_.Get();
}
inline void LogContent::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* LogContent::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* LogContent::release_value() {
  // @@protoc_insertion_point(field_release:pb.LogContent.Value)
  return _impl_.value_.Release();
}
inline void LogContent::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogContent.Value)
}

// -------------------------------------------------------------------

// Log

// int64 Time = 1;
inline void Log::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t Log::_internal_time() const {
  return _impl_.time_;
}
inline int64_t Log::time() const {
  // @@protoc_insertion_point(field_get:pb.Log.Time)
  return _internal_time();
}
inline void Log::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void Log::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.Log.Time)
}

// repeated .pb.LogContent Contents = 2;
inline int Log::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int Log::contents_size() const {
  return _internal_contents_size();
}
inline void Log::clear_contents() {
  _impl_.contents_.Clear();
}
inline ::pb::LogContent* Log::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Log.Contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogContent >*
Log::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:pb.Log.Contents)
  return &_impl_.contents_;
}
inline const ::pb::LogContent& Log::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::pb::LogContent& Log::contents(int index) const {
  // @@protoc_insertion_point(field_get:pb.Log.Contents)
  return _internal_contents(index);
}
inline ::pb::LogContent* Log::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::pb::LogContent* Log::add_contents() {
  ::pb::LogContent* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:pb.Log.Contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogContent >&
Log::contents() const {
  // @@protoc_insertion_point(field_list:pb.Log.Contents)
  return _impl_.contents_;
}

// -------------------------------------------------------------------

// LogTag

// string Key = 1;
inline void LogTag::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& LogTag::key() const {
  // @@protoc_insertion_point(field_get:pb.LogTag.Key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogTag::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogTag.Key)
}
inline std::string* LogTag::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:pb.LogTag.Key)
  return _s;
}
inline const std::string& LogTag::_internal_key() const {
  return _impl_.key_.Get();
}
inline void LogTag::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* LogTag::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* LogTag::release_key() {
  // @@protoc_insertion_point(field_release:pb.LogTag.Key)
  return _impl_.key_.Release();
}
inline void LogTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogTag.Key)
}

// string Value = 2;
inline void LogTag::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& LogTag::value() const {
  // @@protoc_insertion_point(field_get:pb.LogTag.Value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogTag::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogTag.Value)
}
inline std::string* LogTag::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pb.LogTag.Value)
  return _s;
}
inline const std::string& LogTag::_internal_value() const {
  return _impl_.value_.Get();
}
inline void LogTag::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* LogTag::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* LogTag::release_value() {
  // @@protoc_insertion_point(field_release:pb.LogTag.Value)
  return _impl_.value_.Release();
}
inline void LogTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogTag.Value)
}

// -------------------------------------------------------------------

// LogGroup

// repeated .pb.Log Logs = 1;
inline int LogGroup::_internal_logs_size() const {
  return _impl_.logs_.size();
}
inline int LogGroup::logs_size() const {
  return _internal_logs_size();
}
inline void LogGroup::clear_logs() {
  _impl_.logs_.Clear();
}
inline ::pb::Log* LogGroup::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LogGroup.Logs)
  return _impl_.logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Log >*
LogGroup::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:pb.LogGroup.Logs)
  return &_impl_.logs_;
}
inline const ::pb::Log& LogGroup::_internal_logs(int index) const {
  return _impl_.logs_.Get(index);
}
inline const ::pb::Log& LogGroup::logs(int index) const {
  // @@protoc_insertion_point(field_get:pb.LogGroup.Logs)
  return _internal_logs(index);
}
inline ::pb::Log* LogGroup::_internal_add_logs() {
  return _impl_.logs_.Add();
}
inline ::pb::Log* LogGroup::add_logs() {
  ::pb::Log* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:pb.LogGroup.Logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Log >&
LogGroup::logs() const {
  // @@protoc_insertion_point(field_list:pb.LogGroup.Logs)
  return _impl_.logs_;
}

// string Source = 2;
inline void LogGroup::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& LogGroup::source() const {
  // @@protoc_insertion_point(field_get:pb.LogGroup.Source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogGroup.Source)
}
inline std::string* LogGroup::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:pb.LogGroup.Source)
  return _s;
}
inline const std::string& LogGroup::_internal_source() const {
  return _impl_.source_.Get();
}
inline void LogGroup::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* LogGroup::release_source() {
  // @@protoc_insertion_point(field_release:pb.LogGroup.Source)
  return _impl_.source_.Release();
}
inline void LogGroup::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogGroup.Source)
}

// repeated .pb.LogTag LogTags = 3;
inline int LogGroup::_internal_logtags_size() const {
  return _impl_.logtags_.size();
}
inline int LogGroup::logtags_size() const {
  return _internal_logtags_size();
}
inline void LogGroup::clear_logtags() {
  _impl_.logtags_.Clear();
}
inline ::pb::LogTag* LogGroup::mutable_logtags(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LogGroup.LogTags)
  return _impl_.logtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogTag >*
LogGroup::mutable_logtags() {
  // @@protoc_insertion_point(field_mutable_list:pb.LogGroup.LogTags)
  return &_impl_.logtags_;
}
inline const ::pb::LogTag& LogGroup::_internal_logtags(int index) const {
  return _impl_.logtags_.Get(index);
}
inline const ::pb::LogTag& LogGroup::logtags(int index) const {
  // @@protoc_insertion_point(field_get:pb.LogGroup.LogTags)
  return _internal_logtags(index);
}
inline ::pb::LogTag* LogGroup::_internal_add_logtags() {
  return _impl_.logtags_.Add();
}
inline ::pb::LogTag* LogGroup::add_logtags() {
  ::pb::LogTag* _add = _internal_add_logtags();
  // @@protoc_insertion_point(field_add:pb.LogGroup.LogTags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogTag >&
LogGroup::logtags() const {
  // @@protoc_insertion_point(field_list:pb.LogGroup.LogTags)
  return _impl_.logtags_;
}

// string FileName = 4;
inline void LogGroup::clear_filename() {
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& LogGroup::filename() const {
  // @@protoc_insertion_point(field_get:pb.LogGroup.FileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_filename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogGroup.FileName)
}
inline std::string* LogGroup::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:pb.LogGroup.FileName)
  return _s;
}
inline const std::string& LogGroup::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void LogGroup::_internal_set_filename(const std::string& value) {
  
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_filename() {
  
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* LogGroup::release_filename() {
  // @@protoc_insertion_point(field_release:pb.LogGroup.FileName)
  return _impl_.filename_.Release();
}
inline void LogGroup::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogGroup.FileName)
}

// string ContextFlow = 5;
inline void LogGroup::clear_contextflow() {
  _impl_.contextflow_.ClearToEmpty();
}
inline const std::string& LogGroup::contextflow() const {
  // @@protoc_insertion_point(field_get:pb.LogGroup.ContextFlow)
  return _internal_contextflow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogGroup::set_contextflow(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contextflow_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LogGroup.ContextFlow)
}
inline std::string* LogGroup::mutable_contextflow() {
  std::string* _s = _internal_mutable_contextflow();
  // @@protoc_insertion_point(field_mutable:pb.LogGroup.ContextFlow)
  return _s;
}
inline const std::string& LogGroup::_internal_contextflow() const {
  return _impl_.contextflow_.Get();
}
inline void LogGroup::_internal_set_contextflow(const std::string& value) {
  
  _impl_.contextflow_.Set(value, GetArenaForAllocation());
}
inline std::string* LogGroup::_internal_mutable_contextflow() {
  
  return _impl_.contextflow_.Mutable(GetArenaForAllocation());
}
inline std::string* LogGroup::release_contextflow() {
  // @@protoc_insertion_point(field_release:pb.LogGroup.ContextFlow)
  return _impl_.contextflow_.Release();
}
inline void LogGroup::set_allocated_contextflow(std::string* contextflow) {
  if (contextflow != nullptr) {
    
  } else {
    
  }
  _impl_.contextflow_.SetAllocated(contextflow, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contextflow_.IsDefault()) {
    _impl_.contextflow_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LogGroup.ContextFlow)
}

// -------------------------------------------------------------------

// LogGroupList

// repeated .pb.LogGroup LogGroups = 1;
inline int LogGroupList::_internal_loggroups_size() const {
  return _impl_.loggroups_.size();
}
inline int LogGroupList::loggroups_size() const {
  return _internal_loggroups_size();
}
inline void LogGroupList::clear_loggroups() {
  _impl_.loggroups_.Clear();
}
inline ::pb::LogGroup* LogGroupList::mutable_loggroups(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LogGroupList.LogGroups)
  return _impl_.loggroups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogGroup >*
LogGroupList::mutable_loggroups() {
  // @@protoc_insertion_point(field_mutable_list:pb.LogGroupList.LogGroups)
  return &_impl_.loggroups_;
}
inline const ::pb::LogGroup& LogGroupList::_internal_loggroups(int index) const {
  return _impl_.loggroups_.Get(index);
}
inline const ::pb::LogGroup& LogGroupList::loggroups(int index) const {
  // @@protoc_insertion_point(field_get:pb.LogGroupList.LogGroups)
  return _internal_loggroups(index);
}
inline ::pb::LogGroup* LogGroupList::_internal_add_loggroups() {
  return _impl_.loggroups_.Add();
}
inline ::pb::LogGroup* LogGroupList::add_loggroups() {
  ::pb::LogGroup* _add = _internal_add_loggroups();
  // @@protoc_insertion_point(field_add:pb.LogGroupList.LogGroups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::LogGroup >&
LogGroupList::loggroups() const {
  // @@protoc_insertion_point(field_list:pb.LogGroupList.LogGroups)
  return _impl_.loggroups_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Tls
